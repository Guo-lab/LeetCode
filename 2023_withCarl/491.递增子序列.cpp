/*
 * @lc app=leetcode.cn id=491 lang=cpp
 *
 * [491] 递增子序列
 *
 * https://leetcode.cn/problems/non-decreasing-subsequences/description/
 *
 * algorithms
 * Medium (52.29%)
 * Likes:    650
 * Dislikes: 0
 * Total Accepted:    131.7K
 * Total Submissions: 252.1K
 * Testcase Example:  '[4,6,7,7]'
 *
 * 给你一个整数数组 nums ，找出并返回所有该数组中不同的递增子序列，递增子序列中 至少有两个元素 。你可以按 任意顺序 返回答案。
 * 
 * 数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。
 * 
 * 
 * 
 * 示例 1：
 * 
 * 
 * 输入：nums = [4,6,7,7]
 * 输出：[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]
 * 
 * 
 * 示例 2：
 * 
 * 
 * 输入：nums = [4,4,3,2,1]
 * 输出：[[4,4]]
 * 
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * 1 <= nums.length <= 15
 * -100 <= nums[i] <= 100
 * 
 * 
 */

// -------------------------- backtracking ----------------------
// 不可排序

// 90 advanced

// @lc code=start
class Solution {
public:
//  第一次记错了，不是记录某一个数在第几层出现过，因为这样没办法回退，而应该记录某一层有哪些数出现过了
//* 所以后面不用 map 而用set
//  每层都用分别的set
// 至于这里因为[-100,100] 可以数组去重 int x[201] = {0}
    vector<vector<int>> ans;
    vector<int> path;

    vector<vector<int>> findSubsequences(vector<int>& nums) {
        bt(nums, 0, -1000);
        return ans;
    }
    void bt(vector<int>& nums, int cutIdx, int pre) {
        if (cutIdx == nums.size()) {
            return;
        }
        unordered_set<int> visit; 
        for (int i = cutIdx; i < nums.size(); i++) {
            if (cutIdx < i && visit.count(nums[i]) > 0)
                continue;

            int prePre = pre;
            if (nums[i] >= pre) {
                path.push_back(nums[i]);
                pre = nums[i];
                visit.insert(nums[i]);
                if (path.size() > 1)
                    ans.push_back(path);
            } else {
                continue;
            }
            bt(nums, i + 1, pre);
            pre = prePre;
            path.pop_back();
        }
    }
};
// @lc code=end

================================================
[1,2,3,4,5,6,7,8,9,10,1,1,1,1,1]
--------------------------------
[[1,2],[1,2,3],[1,2,3,4],[1,2,3,4,5],[1,2,3,4,5,6],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,10],[1,2,3,4,5,6,7,9],[1,2,3,4,5,6,7,9,10],[1,2,3,4,5,6,7,10],[1,2,3,4,5,6,8],[1,2,3,4,5,6,8,9],[1,2,3,4,5,6,8,9,10],[1,2,3,4,5,6,8,10],[1,2,3,4,5,6,9],[1,2,3,4,5,6,9,10],[1,2,3,4,5,6,10],[1,2,3,4,5,7],[1,2,3,4,5,7,8],[1,2,3,4,5,7,8,9],[1,2,3,4,5,7,8,9,10],[1,2,3,4,5,7,8,10],[1,2,3,4,5,7,9],[1,2,3,4,5,7,9,10],[1,2,3,4,5,7,10],[1,2,3,4,5,8],[1,2,3,4,5,8,9],[1,2,3,4,5,8,9,10],[1,2,3,4,5,8,10],[1,2,3,4,5,9],[1,2,3,4,5,9,10],[1,2,3,4,5,10],[1,2,3,4,6],[1,2,3,4,6,7],[1,2,3,4,6,7,8],[1,2,3,4,6,7,8,9],[1,2,3,4,6,7,8,9,10],[1,2,3,4,6,7,8,10],[1,2,3,4,6,7,9],[1,2,3,4,6,7,9,10],[1,2,3,4,6,7,10],[1,2,3,4,6,8],[1,2,3,4,6,8,9],[1,2,3,4,6,8,9,10],[1,2,3,4,6,8,10],[1,2,3,4,6,9],[1,2,3,4,6,9,10],[1,2,3,4,6,10],[1,2,3,4,7],[1,2,3,4,7,8],[1,2,3,4,7,8,9],[1,2,3,4,7,8,9,10],[1,2,3,4,7,8,10],[1,2,3,4,7,9],[1,2,3,4,7,9,10],[1,2,3,4,7,10],[1,2,3,4,8],[1,2,3,4,8,9],[1,2,3,4,8,9,10],[1,2,3,4,8,10],[1,2,3,4,9],[1,2,3,4,9,10],[1,2,3,4,10],[1,2,3,5],[1,2,3,5,6],[1,2,3,5,6,7],[1,2,3,5,6,7,8],[1,2,3,5,6,7,8,9],[1,2,3,5,6,7,8,9,10],[1,2,3,5,6,7,8,10],[1,2,3,5,6,7,9],[1,2,3,5,6,7,9,10],[1,2,3,5,6,7,10],[1,2,3,5,6,8],[1,2,3,5,6,8,9],[1,2,3,5,6,8,9,10],[1,2,3,5,6,8,10],[1,2,3,5,6,9],[1,2,3,5,6,9,10],[1,2,3,5,6,10],[1,2,3,5,7],[1,2,3,5,7,8],[1,2,3,5,7,8,9],[1,2,3,5,7,8,9,10],[1,2,3,5,7,8,10],[1,2,3,5,7,9],[1,2,3,5,7,9,10],[1,2,3,5,7,10],[1,2,3,5,8],[1,2,3,5,8,9],[1,2,3,5,8,9,10],[1,2,3,5,8,10],[1,2,3,5,9],[1,2,3,5,9,10],[1,2,3,5,10],[1,2,3,6],[1,2,3,6,7],[1,2,3,6,7,8],[1,2,3,6,7,8,9],[1,2,3,6,7,8,9,10],[1,2,3,6,7,8,10],[1,2,3,6,7,9],[1,2,3,6,7,9,10],[1,2,3,6,7,10],[1,2,3,6,8],[1,2,3,6,8,9],[1,2,3,6,8,9,10],[1,2,3,6,8,10],[1,2,3,6,9],[1,2,3,6,9,10],[1,2,3,6,10],[1,2,3,7],[1,2,3,7,8],[1,2,3,7,8,9],[1,2,3,7,8,9,10],[1,2,3,7,8,10],[1,2,3,7,9],[1,2,3,7,9,10],[1,2,3,7,10],[1,2,3,8],[1,2,3,8,9],[1,2,3,8,9,10],[1,2,3,8,10],[1,2,3,9],[1,2,3,9,10],[1,2,3,10],[1,2,4],[1,2,4,5],[1,2,4,5,6],[1,2,4,5,6,7],[1,2,4,5,6,7,8],[1,2,4,5,6,7,8,9],[1,2,4,5,6,7,8,9,10],[1,2,4,5,6,7,8,10],[1,2,4,5,6,7,9],[1,2,4,5,6,7,9,10],[1,2,4,5,6,7,10],[1,2,4,5,6,8],[1,2,4,5,6,8,9],[1,2,4,5,6,8,9,10],[1,2,4,5,6,8,10],[1,2,4,5,6,9],[1,2,4,5,6,9,10],[1,2,4,5,6,10],[1,2,4,5,7],[1,2,4,5,7,8],[1,2,4,5,7,8,9],[1,2,4,5,7,8,9,10],[1,2,4,5,7,8,10],[1,2,4,5,7,9],[1,2,4,5,7,9,10],[1,2,4,5,7,10],[1,2,4,5,8],[1,2,4,5,8,9],[1,2,4,5,8,9,10],[1,2,4,5,8,10],[1,2,4,5,9],
[1,2,4,5,9,10],[1,2,4,5,10],[1,2,4,6],[1,2,4,6,7],[1,2,4,6,7,8],[1,2,4,6,7,8,9],[1,2,4,6,7,8,9,10],[1,2,4,6,7,8,10],[1,2,4,6,7,9],[1,2,4,6,7,9,10],[1,2,4,6,7,10],[1,2,4,6,8],[1,2,4,6,8,9],[1,2,4,6,8,9,10],[1,2,4,6,8,10],[1,2,4,6,9],[1,2,4,6,9,10],[1,2,4,6,10],[1,2,4,7],[1,2,4,7,8],[1,2,4,7,8,9],[1,2,4,7,8,9,10],[1,2,4,7,8,10],[1,2,4,7,9],[1,2,4,7,9,10],[1,2,4,7,10],[1,2,4,8],[1,2,4,8,9],[1,2,4,8,9,10],[1,2,4,8,10],[1,2,4,9],[1,2,4,9,10],[1,2,4,10],[1,2,5],[1,2,5,6],[1,2,5,6,7],[1,2,5,6,7,8],[1,2,5,6,7,8,9],[1,2,5,6,7,8,9,10],[1,2,5,6,7,8,10],[1,2,5,6,7,9],[1,2,5,6,7,9,10],[1,2,5,6,7,10],[1,2,5,6,8],[1,2,5,6,8,9],[1,2,5,6,8,9,10],[1,2,5,6,8,10],[1,2,5,6,9],[1,2,5,6,9,10],[1,2,5,6,10],[1,2,5,7],[1,2,5,7,8],[1,2,5,7,8,9],[1,2,5,7,8,9,10],[1,2,5,7,8,10],[1,2,5,7,9],[1,2,5,7,9,10],[1,2,5,7,10],[1,2,5,8],[1,2,5,8,9],[1,2,5,8,9,10],[1,2,5,8,10],[1,2,5,9],[1,2,5,9,10],[1,2,5,10],[1,2,6],[1,2,6,7],[1,2,6,7,8],[1,2,6,7,8,9],[1,2,6,7,8,9,10],[1,2,6,7,8,10],[1,2,6,7,9],[1,2,6,7,9,10],[1,2,6,7,10],[1,2,6,8],[1,2,6,8,9],[1,2,6,8,9,10],[1,2,6,8,10],[1,2,6,9],[1,2,6,9,10],[1,2,6,10],[1,2,7],[1,2,7,8],
[1,2,7,8,9],[1,2,7,8,9,10],[1,2,7,8,10],[1,2,7,9],[1,2,7,9,10],[1,2,7,10],[1,2,8],[1,2,8,9],[1,2,8,9,10],[1,2,8,10],[1,2,9],[1,2,9,10],[1,2,10],[1,3],[1,3,4],[1,3,4,5],[1,3,4,5,6],[1,3,4,5,6,7],[1,3,4,5,6,7,8],[1,3,4,5,6,7,8,9],[1,3,4,5,6,7,8,9,10],[1,3,4,5,6,7,8,10],[1,3,4,5,6,7,9],[1,3,4,5,6,7,9,10],[1,3,4,5,6,7,10],[1,3,4,5,6,8],[1,3,4,5,6,8,9],[1,3,4,5,6,8,9,10],[1,3,4,5,6,8,10],[1,3,4,5,6,9],[1,3,4,5,6,9,10],[1,3,4,5,6,10],[1,3,4,5,7],[1,3,4,5,7,8],[1,3,4,5,7,8,9],[1,3,4,5,7,8,9,10],[1,3,4,5,7,8,10],[1,3,4,5,7,9],[1,3,4,5,7,9,10],[1,3,4,5,7,10],[1,3,4,5,8],[1,3,4,5,8,9],[1,3,4,5,8,9,10],[1,3,4,5,8,10],[1,3,4,5,9],[1,3,4,5,9,10],[1,3,4,5,10],[1,3,4,6],[1,3,4,6,7],[1,3,4,6,7,8],[1,3,4,6,7,8,9],[1,3,4,6,7,8,9,10],[1,3,4,6,7,8,10],[1,3,4,6,7,9],[1,3,4,6,7,9,10],[1,3,4,6,7,10],[1,3,4,6,8],[1,3,4,6,8,9],[1,3,4,6,8,9,10],[1,3,4,6,8,10],[1,3,4,6,9],[1,3,4,6,9,10],[1,3,4,6,10],[1,3,4,7],[1,3,4,7,8],[1,3,4,7,8,9],[1,3,4,7,8,9,10],[1,3,4,7,8,10],[1,3,4,7,9],[1,3,4,7,9,10],[1,3,4,7,10],[1,3,4,8],[1,3,4,8,9],[1,3,4,8,9,10],[1,3,4,8,10],[1,3,4,9],[1,3,4,9,10],[1,3,4,10],[1,3,5],[1,3,5,6],[1,3,5,6,7],[1,3,5,6,7,8],[1,3,5,6,7,8,9],[1,3,5,6,7,8,9,10],[1,3,5,6,7,8,10],[1,3,5,6,7,9],[1,3,5,6,7,9,10],[1,3,5,6,7,10],[1,3,5,6,8],[1,3,5,6,8,9],[1,3,5,6,8,9,10],[1,3,5,6,8,10],[1,3,5,6,9],[1,3,5,6,9,10],[1,3,5,6,10],[1,3,5,7],[1,3,5,7,8],[1,3,5,7,8,9],[1,3,5,7,8,9,10],[1,3,5,7,8,10],[1,3,5,7,9],[1,3,5,7,9,10],[1,3,5,7,10],[1,3,5,8],[1,3,5,8,9],[1,3,5,8,9,10],[1,3,5,8,10],[1,3,5,9],[1,3,5,9,10],[1,3,5,10],[1,3,6],[1,3,6,7],[1,3,6,7,8],[1,3,6,7,8,9],[1,3,6,7,8,9,10],[1,3,6,7,8,10],[1,3,6,7,9],[1,3,6,7,9,10],[1,3,6,7,10],[1,3,6,8],[1,3,6,8,9],[1,3,6,8,9,10],[1,3,6,8,10],[1,3,6,9],[1,3,6,9,10],[1,3,6,10],[1,3,7],[1,3,7,8],[1,3,7,8,9],[1,3,7,8,9,10],[1,3,7,8,10],[1,3,7,9],[1,3,7,9,10],[1,3,7,10],[1,3,8],[1,3,8,9],[1,3,8,9,10],[1,3,8,10],[1,3,9],[1,3,9,10],[1,3,10],[1,4],[1,4,5],[1,4,5,6],[1,4,5,6,7],[1,4,5,6,7,8],[1,4,5,6,7,8,9],[1,4,5,6,7,8,9,10],[1,4,5,6,7,8,10],[1,4,5,6,7,9],[1,4,5,6,7,9,10],[1,4,5,6,7,10],[1,4,5,6,8],[1,4,5,6,8,9],[1,4,5,6,8,9,10],[1,4,5,6,8,10],[1,4,5,6,9],[1,4,5,6,9,10],[1,4,5,6,10],[1,4,5,7],[1,4,5,7,8],[1,4,5,7,8,9],[1,4,5,7,8,9,10],[1,4,5,7,8,10],[1,4,5,7,9],[1,4,5,7,9,10],[1,4,5,7,10],[1,4,5,8],[1,4,5,8,9],[1,4,5,8,9,10],[1,4,5,8,10],[1,4,5,9],[1,4,5,9,10],[1,4,5,10],[1,4,6],[1,4,6,7],[1,4,6,7,8],[1,4,6,7,8,9],[1,4,6,7,8,9,10],[1,4,6,7,8,10],[1,4,6,7,9],[1,4,6,7,9,10],
[1,4,6,7,10],[1,4,6,8],[1,4,6,8,9],[1,4,6,8,9,10],[1,4,6,8,10],[1,4,6,9],[1,4,6,9,10],[1,4,6,10],[1,4,7],[1,4,7,8],[1,4,7,8,9],[1,4,7,8,9,10],[1,4,7,8,10],[1,4,7,9],[1,4,7,9,10],[1,4,7,10],[1,4,8],[1,4,8,9],[1,4,8,9,10],[1,4,8,10],[1,4,9],[1,4,9,10],[1,4,10],[1,5],[1,5,6],[1,5,6,7],[1,5,6,7,8],[1,5,6,7,8,9],[1,5,6,7,8,9,10],[1,5,6,7,8,10],[1,5,6,7,9],[1,5,6,7,9,10],[1,5,6,7,10],[1,5,6,8],[1,5,6,8,9],[1,5,6,8,9,10],[1,5,6,8,10],[1,5,6,9],[1,5,6,9,10],[1,5,6,10],[1,5,7],[1,5,7,8],[1,5,7,8,9],[1,5,7,8,9,10],[1,5,7,8,10],[1,5,7,9],[1,5,7,9,10],[1,5,7,10],[1,5,8],[1,5,8,9],[1,5,8,9,10],[1,5,8,10],[1,5,9],[1,5,9,10],[1,5,10],[1,6],[1,6,7],[1,6,7,8],[1,6,7,8,9],[1,6,7,8,9,10],[1,6,7,8,10],[1,6,7,9],[1,6,7,9,10],[1,6,7,10],[1,6,8],[1,6,8,9],[1,6,8,9,10],[1,6,8,10],[1,6,9],[1,6,9,10],[1,6,10],[1,7],[1,7,8],[1,7,8,9],[1,7,8,9,10],[1,7,8,10],[1,7,9],[1,7,9,10],[1,7,10],[1,8],[1,8,9],[1,8,9,10],[1,8,10],[1,9],[1,9,10],[1,10],[1,1],[1,1,1],[1,1,1,1],[1,1,1,1,1],[1,1,1,1,1,1],[2,3],[2,3,4],[2,3,4,5],[2,3,4,5,6],[2,3,4,5,6,7],[2,3,4,5,6,7,8],[2,3,4,5,6,7,8,9],[2,3,4,5,6,7,8,9,10],[2,3,4,5,6,7,8,10],[2,3,4,5,6,7,9],[2,3,4,5,6,7,9,10],[2,3,4,5,6,7,10],[2,3,4,5,6,8],[2,3,4,5,6,8,9],[2,3,4,5,6,8,9,10],[2,3,4,5,6,8,10],[2,3,4,5,6,9],[2,3,4,5,6,9,10],[2,3,4,5,6,10],[2,3,4,5,7],[2,3,4,5,7,8],[2,3,4,5,7,8,9],[2,3,4,5,7,8,9,10],[2,3,4,5,7,8,10],[2,3,4,5,7,9],[2,3,4,5,7,9,10],[2,3,4,5,7,10],[2,3,4,5,8],[2,3,4,5,8,9],[2,3,4,5,8,9,10],[2,3,4,5,8,10],[2,3,4,5,9],[2,3,4,5,9,10],
[2,3,4,5,10],[2,3,4,6],[2,3,4,6,7],[2,3,4,6,7,8],[2,3,4,6,7,8,9],[2,3,4,6,7,8,9,10],[2,3,4,6,7,8,10],[2,3,4,6,7,9],[2,3,4,6,7,9,10],[2,3,4,6,7,10],[2,3,4,6,8],[2,3,4,6,8,9],[2,3,4,6,8,9,10],[2,3,4,6,8,10],[2,3,4,6,9],[2,3,4,6,9,10],[2,3,4,6,10],[2,3,4,7],[2,3,4,7,8],[2,3,4,7,8,9],[2,3,4,7,8,9,10],[2,3,4,7,8,10],[2,3,4,7,9],[2,3,4,7,9,10],[2,3,4,7,10],[2,3,4,8],[2,3,4,8,9],[2,3,4,8,9,10],[2,3,4,8,10],[2,3,4,9],[2,3,4,9,10],[2,3,4,10],[2,3,5],[2,3,5,6],[2,3,5,6,7],[2,3,5,6,7,8],[2,3,5,6,7,8,9],[2,3,5,6,7,8,9,10],[2,3,5,6,7,8,10],[2,3,5,6,7,9],[2,3,5,6,7,9,10],[2,3,5,6,7,10],[2,3,5,6,8],[2,3,5,6,8,9],[2,3,5,6,8,9,10],[2,3,5,6,8,10],[2,3,5,6,9],[2,3,5,6,9,10],[2,3,5,6,10],[2,3,5,7],[2,3,5,7,8],[2,3,5,7,8,9],[2,3,5,7,8,9,10],[2,3,5,7,8,10],[2,3,5,7,9],[2,3,5,7,9,10],[2,3,5,7,10],[2,3,5,8],[2,3,5,8,9],[2,3,5,8,9,10],[2,3,5,8,10],[2,3,5,9],[2,3,5,9,10],[2,3,5,10],[2,3,6],[2,3,6,7],[2,3,6,7,8],[2,3,6,7,8,9],[2,3,6,7,8,9,10],[2,3,6,7,8,10],[2,3,6,7,9],[2,3,6,7,9,10],[2,3,6,7,10],[2,3,6,8],[2,3,6,8,9],[2,3,6,8,9,10],[2,3,6,8,10],[2,3,6,9],[2,3,6,9,10],[2,3,6,10],[2,3,7],[2,3,7,8],[2,3,7,8,9],[2,3,7,8,9,10],[2,3,7,8,10],[2,3,7,9],[2,3,7,9,10],[2,3,7,10],[2,3,8],[2,3,8,9],[2,3,8,9,10],[2,3,8,10],[2,3,9],[2,3,9,10],[2,3,10],[2,4],[2,4,5],[2,4,5,6],[2,4,5,6,7],[2,4,5,6,7,8],[2,4,5,6,7,8,9],[2,4,5,6,7,8,9,10],[2,4,5,6,7,8,10],[2,4,5,6,7,9],[2,4,5,6,7,9,10],[2,4,5,6,7,10],[2,4,5,6,8],[2,4,5,6,8,9],[2,4,5,6,8,9,10],[2,4,5,6,8,10],[2,4,5,6,9],[2,4,5,6,9,10],[2,4,5,6,10],[2,4,5,7],[2,4,5,7,8],[2,4,5,7,8,9],[2,4,5,7,8,9,10],[2,4,5,7,8,10],[2,4,5,7,9],[2,4,5,7,9,10],[2,4,5,7,10],[2,4,5,8],[2,4,5,8,9],[2,4,5,8,9,10],[2,4,5,8,10],[2,4,5,9],[2,4,5,9,10],[2,4,5,10],[2,4,6],[2,4,6,7],[2,4,6,7,8],[2,4,6,7,8,9],[2,4,6,7,8,9,10],[2,4,6,7,8,10],[2,4,6,7,9],[2,4,6,7,9,10],[2,4,6,7,10],[2,4,6,8],[2,4,6,8,9],[2,4,6,8,9,10],[2,4,6,8,10],[2,4,6,9],[2,4,6,9,10],[2,4,6,10],[2,4,7],[2,4,7,8],[2,4,7,8,9],[2,4,7,8,9,10],[2,4,7,8,10],[2,4,7,9],[2,4,7,9,10],[2,4,7,10],[2,4,8],[2,4,8,9],[2,4,8,9,10],[2,4,8,10],[2,4,9],[2,4,9,10],[2,4,10],[2,5],[2,5,6],[2,5,6,7],[2,5,6,7,8],[2,5,6,7,8,9],[2,5,6,7,8,9,10],[2,5,6,7,8,10],[2,5,6,7,9],[2,5,6,7,9,10],[2,5,6,7,10],[2,5,6,8],[2,5,6,8,9],[2,5,6,8,9,10],[2,5,6,8,10],[2,5,6,9],[2,5,6,9,10],[2,5,6,10],[2,5,7],[2,5,7,8],[2,5,7,8,9],[2,5,7,8,9,10],[2,5,7,8,10],[2,5,7,9],[2,5,7,9,10],[2,5,7,10],[2,5,8],[2,5,8,9],[2,5,8,9,10],[2,5,8,10],[2,5,9],[2,5,9,10],[2,5,10],[2,6],[2,6,7],[2,6,7,8],[2,6,7,8,9],[2,6,7,8,9,10],[2,6,7,8,10],[2,6,7,9],[2,6,7,9,10],[2,6,7,10],[2,6,8],[2,6,8,9],[2,6,8,9,10],[2,6,8,10],[2,6,9],[2,6,9,10],[2,6,10],[2,7],[2,7,8],[2,7,8,9],[2,7,8,9,10],[2,7,8,10],[2,7,9],[2,7,9,10],[2,7,10],[2,8],[2,8,9],[2,8,9,10],
[2,8,10],[2,9],[2,9,10],[2,10],[3,4],[3,4,5],[3,4,5,6],[3,4,5,6,7],[3,4,5,6,7,8],[3,4,5,6,7,8,9],[3,4,5,6,7,8,9,10],[3,4,5,6,7,8,10],[3,4,5,6,7,9],[3,4,5,6,7,9,10],[3,4,5,6,7,10],[3,4,5,6,8],[3,4,5,6,8,9],[3,4,5,6,8,9,10],[3,4,5,6,8,10],[3,4,5,6,9],[3,4,5,6,9,10],[3,4,5,6,10],[3,4,5,7],[3,4,5,7,8],[3,4,5,7,8,9],[3,4,5,7,8,9,10],[3,4,5,7,8,10],[3,4,5,7,9],[3,4,5,7,9,10],[3,4,5,7,10],[3,4,5,8],[3,4,5,8,9],[3,4,5,8,9,10],[3,4,5,8,10],[3,4,5,9],[3,4,5,9,10],[3,4,5,10],[3,4,6],[3,4,6,7],[3,4,6,7,8],[3,4,6,7,8,9],[3,4,6,7,8,9,10],[3,4,6,7,8,10],[3,4,6,7,9],[3,4,6,7,9,10],[3,4,6,7,10],[3,4,6,8],[3,4,6,8,9],[3,4,6,8,9,10],[3,4,6,8,10],[3,4,6,9],[3,4,6,9,10],[3,4,6,10],[3,4,7],[3,4,7,8],[3,4,7,8,9],[3,4,7,8,9,10],[3,4,7,8,10],[3,4,7,9],[3,4,7,9,10],[3,4,7,10],[3,4,8],[3,4,8,9],[3,4,8,9,10],[3,4,8,10],[3,4,9],[3,4,9,10],[3,4,10],[3,5],[3,5,6],[3,5,6,7],[3,5,6,7,8],[3,5,6,7,8,9],[3,5,6,7,8,9,10],[3,5,6,7,8,10],[3,5,6,7,9],[3,5,6,7,9,10],[3,5,6,7,10],[3,5,6,8],[3,5,6,8,9],[3,5,6,8,9,10],[3,5,6,8,10],[3,5,6,9],[3,5,6,9,10],[3,5,6,10],[3,5,7],[3,5,7,8],[3,5,7,8,9],[3,5,7,8,9,10],[3,5,7,8,10],[3,5,7,9],[3,5,7,9,10],[3,5,7,10],[3,5,8],[3,5,8,9],[3,5,8,9,10],[3,5,8,10],[3,5,9],[3,5,9,10],[3,5,10],[3,6],[3,6,7],[3,6,7,8],[3,6,7,8,9],[3,6,7,8,9,10],[3,6,7,8,10],[3,6,7,9],[3,6,7,9,10],[3,6,7,10],[3,6,8],[3,6,8,9],[3,6,8,9,10],[3,6,8,10],[3,6,9],[3,6,9,10],[3,6,10],[3,7],[3,7,8],[3,7,8,9],[3,7,8,9,10],[3,7,8,10],[3,7,9],[3,7,9,10],[3,7,10],[3,8],[3,8,9],[3,8,9,10],[3,8,10],[3,9],[3,9,10],[3,10],[4,5],[4,5,6],[4,5,6,7],[4,5,6,7,8],[4,5,6,7,8,9],[4,5,6,7,8,9,10],[4,5,6,7,8,10],[4,5,6,7,9],[4,5,6,7,9,10],[4,5,6,7,10],[4,5,6,8],[4,5,6,8,9],[4,5,6,8,9,10],[4,5,6,8,10],[4,5,6,9],[4,5,6,9,10],[4,5,6,10],[4,5,7],[4,5,7,8],[4,5,7,8,9],[4,5,7,8,9,10],[4,5,7,8,10],[4,5,7,9],[4,5,7,9,10],[4,5,7,10],[4,5,8],[4,5,8,9],[4,5,8,9,10],[4,5,8,10],[4,5,9],[4,5,9,10],[4,5,10],[4,6],[4,6,7],[4,6,7,8],[4,6,7,8,9],[4,6,7,8,9,10],[4,6,7,8,10],[4,6,7,9],[4,6,7,9,10],[4,6,7,10],[4,6,8],[4,6,8,9],[4,6,8,9,10],[4,6,8,10],[4,6,9],[4,6,9,10],[4,6,10],[4,7],[4,7,8],[4,7,8,9],[4,7,8,9,10],[4,7,8,10],[4,7,9],[4,7,9,10],[4,7,10],[4,8],[4,8,9],[4,8,9,10],[4,8,10],[4,9],[4,9,10],[4,10],[5,6],[5,6,7],[5,6,7,8],[5,6,7,8,9],[5,6,7,8,9,10],[5,6,7,8,10],[5,6,7,9],[5,6,7,9,10],[5,6,7,10],[5,6,8],[5,6,8,9],[5,6,8,9,10],[5,6,8,10],[5,6,9],[5,6,9,10],[5,6,10],[5,7],[5,7,8],[5,7,8,9],[5,7,8,9,10],[5,7,8,10],[5,7,9],[5,7,9,10],[5,7,10],[5,8],[5,8,9],[5,8,9,10],[5,8,10],[5,9],[5,9,10],[5,10],[6,7],[6,7,8],[6,7,8,9],[6,7,8,9,10],[6,7,8,10],[6,7,9],[6,7,9,10],[6,7,10],[6,8],[6,8,9],[6,8,9,10],[6,8,10],[6,9],[6,9,10],[6,10],[7,8],[7,8,9],[7,8,9,10],[7,8,10],[7,9],[7,9,10],[7,10],[8,9],[8,9,10],[8,10],[9,10]]
================================================

================================================
[1,2,3,1,1]
--------------
[[1,2],[1,2,3],[1,3],[1,1],[1,1,1],[2,3]]
================================================










class Wrong_Solution { // [1,2,3,1,1] 判断不出来
public:
    vector<vector<int>> ans;
    vector<int> path;

    vector<vector<int>> findSubsequences(vector<int>& nums) {
        unordered_map<int, int> visit; // 第一次记错了，不是某一个数在第几层出现过，因为这样没办法回退，而应该记录某一层有哪些数出现过了
        bt(nums, 0, -1000, visit, 0);
        return ans;
    }
    void bt(vector<int>& nums, int cutIdx, int pre, unordered_map<int, int>& visit, int depth) {
        if (cutIdx == nums.size()) {
            return;
        }
        for (int i = cutIdx; i < nums.size(); i++) {
            // cout << cutIdx << " " << i << endl;
            if (cutIdx < i && nums[i] == nums[i - 1])
                continue;
            //// if (nums[i] == 1) cout << visit[nums[i]] << endl;
            //// if (nums[i] == 2) cout << "2:" <<visit[nums[i]] << endl;
            if (cutIdx < i && visit[nums[i]] == depth + 1) // 同一层不可重复
                continue;

            int prePre = pre;
            // cout << pre << endl;
            if (nums[i] >= pre) {
                    path.push_back(nums[i]);
                    visit[nums[i]] = depth + 1;
                    pre = nums[i];
                    cout << nums[i] << " " << visit[nums[i]] << endl;
                    if (path.size() > 1)
                        ans.push_back(path);
            } else {
                continue;
            }
            bt(nums, i + 1, pre, visit, depth + 1);
            pre = prePre;
            //// cout << "pre: " << pre << endl;
            //X visit[nums[i]] = depth;
            path.pop_back();
        }
    }
};
