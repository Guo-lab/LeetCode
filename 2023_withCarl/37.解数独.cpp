/*
 * @lc app=leetcode.cn id=37 lang=cpp
 *
 * [37] 解数独
 *
 * https://leetcode.cn/problems/sudoku-solver/description/
 *
 * algorithms
 * Hard (67.60%)
 * Likes:    1612
 * Dislikes: 0
 * Total Accepted:    201.9K
 * Total Submissions: 298.9K
 * Testcase Example:  '[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]'
 *
 * 编写一个程序，通过填充空格来解决数独问题。
 * 
 * 数独的解法需 遵循如下规则：
 * 
 * 
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * 
 * 
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 * 
 * 
 * 
 * 
 * 
 * 
 * 示例 1：
 * 
 * 
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
 * 
 * 输出：[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
 * 解释：输入的数独如上图所示，唯一有效的解决方案如下所示：
 * 
 * 
 * 
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字或者 '.'
 * 题目数据 保证 输入数独仅有一个解
 * 
 * 
 * 
 * 
 * 
 */

// -------------------------- backtracking ----------------------
// HARD
// 2D bt

// 返回条件需要重新复习

// @lc code=start
class Solution {
public:
    vector<vector<vector<char>>> ans;
    void solveSudoku(vector<vector<char>>& board) {
        bt(board);
        // cout << ans.size() << endl;
        board = ans[0];
    }
    void bt(vector<vector<char>>& board) {
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board.size(); j++) {
                if (board[i][j] != '.') continue;
                // bt(board, i, j);
                for (int k = 1; k <= 9; k++) {
                    if (isValid(board, i, j, k)) { // k 还没放进去呢 
                        board[i][j] = '0' + k;
                        bt(board);
                        board[i][j] = '.';
                    }
                }
                return;
            }
        }
        ans.push_back(board);
    }
    bool isValid(vector<vector<char>>& board, int row, int col, int value) {
        for (int i = 0; i < board.size(); i++)
            if (board[row][i] == value + '0')
                return false;
        for (int i = 0; i < board.size(); i++)
            if (board[i][col] == value + '0')
                return false;
        for (int i = (row / 3) * 3; i < (row / 3 * 3) + 3; i++)
            for (int j = (col / 3) * 3; j < (col / 3 * 3) + 3; j++)
                if (board[i][j] == value + '0')
                    return false;
        return true;
    }
};
// @lc code=end


[
    ["5","3","1","2","7","6","9","4","8"],
    ["6","4","7","1","9","5","8","3","2"],
    ["2","9","8","5","3","7","1","6","4"],
    ["8","1","9","7","6","2","4","5","3"],
    ["4","7","2","8","5","3","6","9","1"],
    ["7","5","4","9","2","8","3","1","6"],
    ["9","6","5","3","4","1","2","8","7"],
    ["3","8","6","4","1","9","7","2","5"],
    ["1","2","3","6","8","4","5","7","9"]
]