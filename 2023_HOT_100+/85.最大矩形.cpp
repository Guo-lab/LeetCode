/*
 * @lc app=leetcode.cn id=85 lang=cpp
 *
 * [85] 最大矩形
 */

// @lc code=start
class Solution {
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        if (matrix.size() == 0) {
            return 0;
        } else {
            int area = matrix[0][0] - '0';
            int biggest = matrix[0][0] - '0';
            for (int i = 1; i < matrix[0].size(); i++) {
                if (matrix[0][i] - '0' == 1) {
                    area++;
                    biggest = (biggest < area) ? area : biggest;
                } else {
                    area = 0;
                }
            }
            if (matrix.size() == 1) {
                return biggest;
            } else {
                stack<pair<int, int>> tmpHeight;  
                vector<vector<int>> matrix_to_int(matrix.size());
                for (int i = 0; i < matrix.size(); i++) {
                    matrix_to_int[i].resize(matrix[0].size());
                    if (i == 0) {
                        for (int j = 0; j < matrix[0].size(); j++)
                            matrix_to_int[i][j] = matrix[i][j] - '0';
                    }
                }       
                for (int i = 1; i < matrix.size(); i++) {
                    while (!tmpHeight.empty()) tmpHeight.pop();
                    tmpHeight.push({0, 0});
                    for (int j = 0; j < matrix[0].size(); j++) {
                        matrix_to_int[i][j] = matrix[i][j] == '0' ? 0 : 1 + matrix_to_int[i - 1][j]; 
                        ////matrix[i][j] = matrix[i][j] == '0' ? '0' : '0' + (matrix[i - 1][j] - '0') + 1;
                    }
                    matrix_to_int[i].push_back(0);

                    for (int j = 0; j < matrix[0].size() + 1; j++) {
                        if (matrix_to_int[i][j] >= tmpHeight.top().first) {
                            tmpHeight.push({matrix_to_int[i][j], j + 1});
                        } else {
                            while (tmpHeight.top().first > matrix_to_int[i][j]) { //! ////////////////////////
                                int height = tmpHeight.top().first;
                                tmpHeight.pop();
                                biggest = (biggest < height * (j - tmpHeight.top().second))? height * (j - tmpHeight.top().second) : biggest;
                            }
                            tmpHeight.push({matrix_to_int[i][j], j + 1});
                        }
                        //cout << matrix_to_int[i][j] << " ";
                    }
                    //cout << endl;
                    //cout << biggest << endl;
                }
                return biggest;   
            }
        }
    }
};
// @lc code=end

/**
 * @brief case
[["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"]]\n
 * Answer:
500
 * 
 */