/*
 * @lc app=leetcode.cn id=437 lang=cpp
 *
 * [437] 路径总和 III
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int count = 0;
    int pathSum(TreeNode* root, int targetSum) {
        if (!root) return 0;
        dfs(root, targetSum);
        // 跳过根结点
        pathSum(root->left, targetSum);
        pathSum(root->right, targetSum);
        return count;
    }
    // 神奇的long long 
    void dfs(TreeNode* root, long long target) {
        if (!root) return;
        if (root->val == target) 
            count++;
        dfs(root->left, target - root->val);
        dfs(root->right, target - root->val);
        return;
    }
};
// @lc code=end


//[10,5,-3,3,2,null,11,3,-2,null,1]\n8\n
//3

//[0,1,1]\n1\n
//4

//[1,null,2,null,3,null,4,null,5]\n3\n
//2

//[1,-2,-3,1,3,-2,null,-1]\n0\n
//2

//[1,0,1,1,2,0,-1,0,1,-1,0,-1,0,1,0]\n2\n
//13

// int -> long long
// [1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null,1000000000,null'... 6001 more character
// 0

class WA_Solution {
    /// WA datapoint
    /// [1,0,1,1,2,0,-1,0,1,-1,0,-1,0,1,0]\n2\n
    /// 13
    // 应该在消除冗余的过程中出现逻辑漏洞
    // 去学习正确解法
public:
    int count = 0;
    unordered_map<TreeNode*, int> tmp;
    unordered_map<TreeNode*, int> tmp2;
    int pathSum(TreeNode* root, int targetSum) {
        if (root == nullptr) return 0;
        if (root->left == nullptr && root->right == nullptr) {
            if (root->val == targetSum) 
                return 1;
            else 
                return 0;
        }
        dfs(root, targetSum, 0);
        return count;
    }
    void dfs(TreeNode* root, int target, int sum) {
        if (root->val + sum == target || root->val == target) {
            if (root->val == target && tmp.count(root))
                count--;
            if (root->val + sum == target && tmp2.count(root))
                count--;
            count++;
            if (root->val == target) tmp[root] = 1;
            if (root->val + sum == target) tmp2[root] = 1;
            // cout << root->val << " " << count << endl;
        }
        if (sum == 0 && root->val == target) count++;

        if (root->left != nullptr) {
            dfs(root->left, target, sum + root->val);
            dfs(root->left, target, root->val);
        }
        if (root->right != nullptr) {
            dfs(root->right, target, sum + root->val);
            dfs(root->right, target, root->val);
        }
        return;
    }
};